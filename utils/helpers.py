"""
Fonctions utilitaires pour le dashboard Kolet
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Any, Dict, List, Optional, Union
import re
import locale

# Configuration locale pour le formatage
try:
    locale.setlocale(locale.LC_ALL, 'fr_FR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'French_France.1252')
    except:
        pass  # Utiliser les param√®tres par d√©faut


def format_currency(amount: Union[float, int], currency: str = "EUR") -> str:
    """
    Formate un montant en devise

    Args:
        amount: Montant √† formater
        currency: Code de la devise

    Returns:
        Montant format√©
    """
    if pd.isna(amount) or amount is None:
        return "0,00 ‚Ç¨"

    try:
        if currency == "EUR":
            return f"{amount:,.2f} ‚Ç¨".replace(",", " ").replace(".", ",")
        elif currency == "USD":
            return f"${amount:,.2f}"
        else:
            return f"{amount:,.2f} {currency}"
    except:
        return f"{amount} {currency}"


def format_number(number: Union[float, int], decimals: int = 0) -> str:
    """
    Formate un nombre avec s√©parateurs

    Args:
        number: Nombre √† formater
        decimals: Nombre de d√©cimales

    Returns:
        Nombre format√©
    """
    if pd.isna(number) or number is None:
        return "0"

    try:
        if decimals == 0:
            return f"{int(number):,}".replace(",", " ")
        else:
            return f"{number:,.{decimals}f}".replace(",", " ").replace(".", ",")
    except:
        return str(number)


def format_percentage(percentage: Union[float, int], decimals: int = 2) -> str:
    """
    Formate un pourcentage

    Args:
        percentage: Pourcentage √† formater
        decimals: Nombre de d√©cimales

    Returns:
        Pourcentage format√©
    """
    if pd.isna(percentage) or percentage is None:
        return "0,00%"

    try:
        formatted = f"{percentage:.{decimals}f}%".replace(".", ",")
        return formatted
    except:
        return f"{percentage}%"


def format_delta(current: float, previous: float, format_type: str = "percentage") -> Dict[str, Any]:
    """
    Calcule et formate la variation entre deux valeurs

    Args:
        current: Valeur actuelle
        previous: Valeur pr√©c√©dente
        format_type: Type de formatage ('percentage', 'absolute', 'currency')

    Returns:
        Dictionnaire avec la variation format√©e
    """
    if pd.isna(current) or pd.isna(previous) or previous == 0:
        return {
            'delta': 0,
            'delta_formatted': "0",
            'color': "normal",
            'arrow': ""
        }

    delta = current - previous
    delta_pct = (delta / previous) * 100

    # D√©terminer la couleur et la fl√®che
    if delta > 0:
        color = "normal"  # Streamlit utilise "normal" pour positif
        arrow = "üî∫"
    elif delta < 0:
        color = "inverse"  # Streamlit utilise "inverse" pour n√©gatif
        arrow = "üîª"
    else:
        color = "off"
        arrow = "‚ûñ"

    # Formater selon le type
    if format_type == "percentage":
        delta_formatted = format_percentage(delta_pct)
    elif format_type == "currency":
        delta_formatted = format_currency(delta)
    else:
        delta_formatted = format_number(delta)

    return {
        'delta': delta,
        'delta_pct': delta_pct,
        'delta_formatted': delta_formatted,
        'color': color,
        'arrow': arrow
    }


def calculate_funnel_metrics(impressions: int, clicks: int, installs: int,
                             purchases: int = 0) -> Dict[str, float]:
    """
    Calcule les m√©triques du funnel de conversion

    Args:
        impressions: Nombre d'impressions
        clicks: Nombre de clics
        installs: Nombre d'installations
        purchases: Nombre d'achats

    Returns:
        Dictionnaire avec les m√©triques calcul√©es
    """
    metrics = {
        'impressions': impressions,
        'clicks': clicks,
        'installs': installs,
        'purchases': purchases
    }

    # CTR (Click-Through Rate)
    metrics['ctr'] = (clicks / impressions * 100) if impressions > 0 else 0

    # Taux de conversion Install
    metrics['install_rate'] = (installs / clicks * 100) if clicks > 0 else 0

    # Taux de conversion Purchase
    metrics['purchase_rate'] = (purchases / installs * 100) if installs > 0 else 0

    # Taux de conversion global
    metrics['overall_conversion'] = (installs / impressions * 100) if impressions > 0 else 0

    return metrics


def detect_date_format(date_string: str) -> str:
    """
    D√©tecte le format d'une date

    Args:
        date_string: Cha√Æne de date √† analyser

    Returns:
        Format de date d√©tect√©
    """
    date_formats = [
        '%Y-%m-%d',
        '%d/%m/%Y',
        '%m/%d/%Y',
        '%Y/%m/%d',
        '%d-%m-%Y',
        '%m-%d-%Y',
        '%Y.%m.%d',
        '%d.%m.%Y'
    ]

    for fmt in date_formats:
        try:
            datetime.strptime(date_string, fmt)
            return fmt
        except ValueError:
            continue

    return '%Y-%m-%d'  # Format par d√©faut


def clean_currency_string(currency_str: Union[str, float, int]) -> float:
    """
    Nettoie une cha√Æne de devise et la convertit en float

    Args:
        currency_str: Cha√Æne ou nombre √† nettoyer

    Returns:
        Valeur num√©rique
    """
    if pd.isna(currency_str):
        return 0.0

    if isinstance(currency_str, (int, float)):
        return float(currency_str)

    # Nettoyer la cha√Æne
    cleaned = re.sub(r'[‚Ç¨$¬£¬•,\s"]', '', str(currency_str))
    cleaned = cleaned.replace(',', '.')

    try:
        return float(cleaned)
    except ValueError:
        return 0.0


def generate_date_range(start_date: str, end_date: str) -> List[str]:
    """
    G√©n√®re une liste de dates entre deux dates

    Args:
        start_date: Date de d√©but (YYYY-MM-DD)
        end_date: Date de fin (YYYY-MM-DD)

    Returns:
        Liste des dates
    """
    start = datetime.strptime(start_date, '%Y-%m-%d')
    end = datetime.strptime(end_date, '%Y-%m-%d')

    date_list = []
    current = start

    while current <= end:
        date_list.append(current.strftime('%Y-%m-%d'))
        current += timedelta(days=1)

    return date_list


def get_period_comparison_dates(period: str = "last_30_days") -> Dict[str, str]:
    """
    G√©n√®re les dates pour les comparaisons de p√©riodes

    Args:
        period: P√©riode √† analyser

    Returns:
        Dictionnaire avec les dates
    """
    today = datetime.now()

    if period == "last_7_days":
        current_end = today
        current_start = today - timedelta(days=6)
        previous_end = current_start - timedelta(days=1)
        previous_start = previous_end - timedelta(days=6)

    elif period == "last_30_days":
        current_end = today
        current_start = today - timedelta(days=29)
        previous_end = current_start - timedelta(days=1)
        previous_start = previous_end - timedelta(days=29)

    elif period == "last_90_days":
        current_end = today
        current_start = today - timedelta(days=89)
        previous_end = current_start - timedelta(days=1)
        previous_start = previous_end - timedelta(days=89)

    else:  # Par d√©faut last_30_days
        current_end = today
        current_start = today - timedelta(days=29)
        previous_end = current_start - timedelta(days=1)
        previous_start = previous_end - timedelta(days=29)

    return {
        'current_start': current_start.strftime('%Y-%m-%d'),
        'current_end': current_end.strftime('%Y-%m-%d'),
        'previous_start': previous_start.strftime('%Y-%m-%d'),
        'previous_end': previous_end.strftime('%Y-%m-%d')
    }


def calculate_growth_rate(current: float, previous: float) -> float:
    """
    Calcule le taux de croissance

    Args:
        current: Valeur actuelle
        previous: Valeur pr√©c√©dente

    Returns:
        Taux de croissance en pourcentage
    """
    if pd.isna(current) or pd.isna(previous) or previous == 0:
        return 0.0

    return ((current - previous) / previous) * 100


def categorize_performance(value: float, metric: str) -> str:
    """
    Cat√©gorise la performance d'une m√©trique

    Args:
        value: Valeur de la m√©trique
        metric: Type de m√©trique

    Returns:
        Cat√©gorie de performance
    """
    if metric == "cpa":
        if value <= 5:
            return "Excellent"
        elif value <= 15:
            return "Bon"
        elif value <= 30:
            return "Moyen"
        else:
            return "Faible"

    elif metric == "roas":
        if value >= 3:
            return "Excellent"
        elif value >= 2:
            return "Bon"
        elif value >= 1:
            return "Moyen"
        else:
            return "Faible"

    elif metric == "ctr":
        if value >= 3:
            return "Excellent"
        elif value >= 1.5:
            return "Bon"
        elif value >= 0.5:
            return "Moyen"
        else:
            return "Faible"

    elif metric == "conversion_rate":
        if value >= 10:
            return "Excellent"
        elif value >= 5:
            return "Bon"
        elif value >= 2:
            return "Moyen"
        else:
            return "Faible"

    return "Non d√©fini"


def validate_file_upload(file, max_size_mb: int = 50) -> Dict[str, Any]:
    """
    Valide un fichier upload√©

    Args:
        file: Fichier Streamlit upload√©
        max_size_mb: Taille maximale en MB

    Returns:
        R√©sultat de la validation
    """
    result = {
        'valid': True,
        'errors': [],
        'warnings': []
    }

    if file is None:
        result['valid'] = False
        result['errors'].append("Aucun fichier s√©lectionn√©")
        return result

    # V√©rifier l'extension
    if not file.name.lower().endswith('.csv'):
        result['valid'] = False
        result['errors'].append("Le fichier doit √™tre au format CSV")

    # V√©rifier la taille
    file_size_mb = file.size / (1024 * 1024)
    if file_size_mb > max_size_mb:
        result['valid'] = False
        result['errors'].append(f"Le fichier est trop volumineux ({file_size_mb:.1f}MB > {max_size_mb}MB)")

    return result


def create_summary_stats(df: pd.DataFrame) -> Dict[str, Any]:
    """
    Cr√©e des statistiques r√©sum√©es pour un DataFrame

    Args:
        df: DataFrame √† analyser

    Returns:
        Dictionnaire avec les statistiques
    """
    if df.empty:
        return {}

    numeric_columns = df.select_dtypes(include=[np.number]).columns
    stats = {}

    for col in numeric_columns:
        if col in df.columns:
            stats[col] = {
                'total': df[col].sum(),
                'mean': df[col].mean(),
                'median': df[col].median(),
                'std': df[col].std(),
                'min': df[col].min(),
                'max': df[col].max(),
                'count': df[col].count()
            }

    return stats


def export_to_excel(dataframes: Dict[str, pd.DataFrame], filename: str = None) -> str:
    """
    Exporte plusieurs DataFrames vers un fichier Excel

    Args:
        dataframes: Dictionnaire {nom_onglet: DataFrame}
        filename: Nom du fichier (optionnel)

    Returns:
        Chemin du fichier cr√©√©
    """
    if filename is None:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"kolet_export_{timestamp}.xlsx"

    with pd.ExcelWriter(filename, engine='openpyxl') as writer:
        for sheet_name, df in dataframes.items():
            df.to_excel(writer, sheet_name=sheet_name, index=False)

    return filename


def generate_color_palette(n_colors: int, palette_type: str = "default") -> List[str]:
    """
    G√©n√®re une palette de couleurs

    Args:
        n_colors: Nombre de couleurs n√©cessaires
        palette_type: Type de palette

    Returns:
        Liste des couleurs en hex
    """
    palettes = {
        'default': ['#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6', '#1abc9c', '#34495e'],
        'blue': ['#3498db', '#5dade2', '#85c1e9', '#aed6f1', '#d6eaf8'],
        'green': ['#2ecc71', '#58d68d', '#82e0aa', '#abebc6', '#d5f4e6'],
        'warm': ['#e74c3c', '#f39c12', '#f7dc6f', '#f8c471', '#f5b7b1']
    }

    base_colors = palettes.get(palette_type, palettes['default'])

    # R√©p√©ter les couleurs si n√©cessaire
    colors = []
    for i in range(n_colors):
        colors.append(base_colors[i % len(base_colors)])

    return colors


def safe_divide(numerator: float, denominator: float, default: float = 0.0) -> float:
    """
    Division s√©curis√©e qui √©vite la division par z√©ro

    Args:
        numerator: Num√©rateur
        denominator: D√©nominateur
        default: Valeur par d√©faut si division par z√©ro

    Returns:
        R√©sultat de la division ou valeur par d√©faut
    """
    try:
        if denominator == 0 or pd.isna(denominator):
            return default
        return numerator / denominator
    except:
        return default


def truncate_text(text: str, max_length: int = 50, suffix: str = "...") -> str:
    """
    Tronque un texte √† une longueur maximale

    Args:
        text: Texte √† tronquer
        max_length: Longueur maximale
        suffix: Suffixe √† ajouter

    Returns:
        Texte tronqu√©
    """
    if pd.isna(text) or len(str(text)) <= max_length:
        return str(text)

    return str(text)[:max_length - len(suffix)] + suffix